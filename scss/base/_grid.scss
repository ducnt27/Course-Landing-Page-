@use "sass:math";
@use "sass:map";
// Breakpoints, dimension, container, row, column, v.v
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  //   xxl: 1400px,
);
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1202px,
  //   xxl: 1320px,
);
$grid-columns: 12;
$grid-gutter-width: 32px;

%gutter-padding {
  padding-left: calc(var(--grid-gutter-x) * 0.5);
  padding-right: calc(var(--grid-gutter-x) * 0.5);
}

.container-fluid {
  --grid-gutter-x: #{$grid-gutter-width};
  --grid-gutter-y: #{$grid-gutter-width};
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  @extend %gutter-padding;
}

.container {
  @extend .container-fluid;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(var(--grid-gutter-y) * -1);
  margin-left: calc(var(--grid-gutter-x) * 0.5 * -1);
  margin-right: calc(var(--grid-gutter-x) * 0.5 * -1);

  &[class*="row-cols-"] > *,
  [class*="col-"] {
    flex: 0 0 auto;
    @extend %gutter-padding;
  }
  > * {
    margin-top: var(--grid-gutter-y);
  }
}

.col {
  flex: 1 0;
  @extend %gutter-padding;
}

@mixin make-media-query($dimension, $bypass: false) {
  @if $bypass {
    @content;
  } @else {
    @media (min-width: $dimension) {
      @content;
    }
  }
}

@each $breakpoint, $dimension in $grid-breakpoints {
  $max-width: map.get($container-max-widths, $breakpoint);
  $infix: if($breakpoint == xs, "", "-#{$breakpoint}");
  @include make-media-query($dimension, $breakpoint == xs) {
    .container {
      max-width: $max-width;
    }

    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {
        width: math.div(100%, $grid-columns) * $i;
      }
    }
  }
}
